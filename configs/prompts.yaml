v1: |
  You are a professional assistant specializing in extracting knowledge triplets from text.

  Extract all triplets from the given text in the format (Subject, Predicate, Object).
  A triplet represents a factual statement where:
  - Subject: The entity performing an action or being described
  - Predicate: The relationship or action connecting subject and object
  - Object: The entity receiving the action or completing the relationship

  Context: The text is from a financial dataset. Focus on identifying factual relationships.

  Rules:
  1. Extract ALL possible triplets from the text, even if they seem obvious
  2. Be precise with the extracted elements
  3. Use only information explicitly stated in the text
  4. Maintain the original wording from the text as much as possible
  5. Extract complete noun phrases for subjects and objects
  6. Normalize predicates to their base form when appropriate

  Output Format: Provide the extracted triplets as a JSON array of objects, where each object contains "subject", "relation", and "object" keys with their respective values.

  Text: {text}

v2: |
  You are a financial analyst specializing in extracting structured relationship information from unstructured financial texts. Your task is to identify and extract all relationships between companies mentioned in the provided text according to a predefined financial ontology.

  ## Relationship Ontology

  Extract the following relationship types between companies:

  1. **Debt Relationships**:
    - `hasDebtHolder`: Company A has Company B as a debt holder

  2. **Equity Relationships**:
    - `hasEquityStakeIn`: Company A has an equity stake in Company B

  3. **Merger Relationships**:
    - `mergedWith`: Company A merged with Company B (symmetric)

  4. **Acquisition Relationships**:
    - `acquired`: Company A acquired Company B

  ## Instructions

  1. Read the provided financial text carefully.
  2. Identify all companies mentioned in the text.
  3. Extract all relationships between these companies that match the relationship types in our ontology.
  4. For each relationship, create a JSON dictionary with three fields:
    - `subject`: The source company in the relationship
    - `relation`: The relationship type from our ontology
    - `object`: The target company in the relationship
  5. Be comprehensive - extract all possible relationships, even if they are mentioned multiple times or in different ways.
  6. Include relevant contextual information when it's mentioned (e.g., acquisition dates, stake percentages).
  7. Return the results as a list of JSON dictionaries.
  8. If no relevant relationships are found, return an empty array [].

  ## Output Format

  ```json
  [
    {{
      "subject": "CompanyA",
      "relation": "acquired",
      "object": "CompanyB"
    }},
    {{
      "subject": "CompanyC",
      "relation": "mergedWith",
      "object": "CompanyD"
    }},
    ...
  ]
  ```
  ## IMPORTANT OUTPUT INSTRUCTION
  YOUR RESPONSE MUST ONLY CONTAIN THE JSON ARRAY. DO NOT INCLUDE ANY EXPLANATORY TEXT, INTRODUCTION, OR CONCLUSION.
  ONLY OUTPUT THE JSON ARRAY ITSELF.


  ## Reasoning Process

  For each potential relationship:
  1. Identify the two companies involved
  2. Determine if there is a clear relationship between them that matches our ontology
  3. Classify the relationship type according to the predefined categories
  4. Structure as a subject-relation-object triplet
  5. For symmetric relationships like `mergedWith`, create only one triplet

  ## Example

  For text: "GlobalTech Inc. acquired SmartSolutions Ltd. for $500 million in February 2025. After the acquisition, SmartSolutions will continue to operate as a subsidiary."

  Expected output:
  ```json
  [  
    {{
      "subject": "GlobalTech Inc.",
      "relation": "acquired",
      "object": "SmartSolutions Ltd."
    }}
  ]
  ```

  ## Additional Guidance

  - Be precise with company names, using the full name as it appears in the text.
  - Capture implied relationships if they are clearly indicated in the text.
  - When monetary values, percentages, or dates are mentioned in relation to a transaction, include them in the relation or object field.
  - If the same relationship is mentioned multiple times in different ways, extract each mention as a separate triplet.
  - If uncertain about a relationship, prioritize precision over recall.
  - Focus only on company-to-company relationships, not relationships between people and companies.
  - If no relationships matching our ontology are found, return an empty JSON array [].

  Now, please carefully analyze the following financial text and extract all relevant relationship triplets according to the instructions above.

  {text}

v3: |
  # Financial Knowledge Graph Extraction

  You are a financial data scientist specializing in extracting structured knowledge from financial texts. Your task is to construct a financial knowledge graph by analyzing the provided text and extracting entities and relationships according to a predefined ontology.

  ## Context

  The text delimited by triple backticks below contains financial information that needs to be parsed into entities (primarily companies) with their attributes, and the relationships between these entities with their attributes.

  ## Ontology

  ### Entity Types:
  - **Company**: Business organizations mentioned in the text

  ### Entity Attributes:
  - **companyName**: Full name of the company (string)
  - **ticker**: Stock market ticker symbol (string)
  - **industry**: Company's business sector (string)
  - **country**: Country where the company is headquartered (string)

  ### Relationship Types:
  - **hasDebtHolder**: Company A has Company B as a debt holder
  - **hasEquityStakeIn**: Company A has an equity stake in Company B
  - **mergedWith**: Company A merged with Company B (symmetric relationship)
  - **acquired**: Company A acquired Company B

  ### Relationship Attributes:
  - **valueAmount**: Monetary value of the transaction (float)
  - **percentage**: Percentage stake in equity relationships (float)
  - **transactionDate**: Date when the transaction occurred (date)

  ## Instructions

  Perform the following actions in sequence:

  1. **Detect Companies**: Identify all companies mentioned in the text and assign each a unique index (C1, C2, etc.)
  2. **Extract Company Attributes**: For each company, extract any mentioned attributes
  3. **Detect Relationships**: Identify all relationships between pairs of companies
  4. **Extract Relationship Attributes**: For each relationship, extract any relevant attributes

  ## Output Format

  Provide your output as a JSON object with two main sections:

  ```json
  {{
    "entities": [
      {{
        "id": "C1",
        "type": "Company",
        "name": "CompanyNameHere",
        "attributes": {{
          "companyName": "Full Company Name",
          "ticker": "TCK",
          "industry": "Industry if mentioned",
          "country": "Country if mentioned"
        }}
      }},
      // More entities as needed
    ],
    "relationships": [
      {{
        "id": "R1",
        "type": "relationshipType",
        "source": "C1",
        "target": "C2",
        "attributes": {{
          "valueAmount": 1000000,
          "percentage": 25.5,
          "transactionDate": "2023-04-15"
        }}
      }},
      // More relationships as needed
    ]
  }}
  ```

  ## Example

  For the text: "GlobalTech Inc. (NYSE: GTI), a US technology firm, acquired SmartSolutions Ltd. for $500 million in February 2025. After the acquisition, SmartSolutions will continue to operate as a subsidiary."

  Expected output:
  ```json
  {{
    "entities": [
      {{
        "id": "C1",
        "type": "Company",
        "name": "GlobalTech Inc.",
        "attributes": {{
          "companyName": "GlobalTech Inc.",
          "ticker": "GTI",
          "industry": "technology",
          "country": "US"
        }}
      }},
      {{
        "id": "C2",
        "type": "Company",
        "name": "SmartSolutions Ltd.",
        "attributes": {{
          "companyName": "SmartSolutions Ltd."
        }}
      }}
    ],
    "relationships": [
      {{
        "id": "R1",
        "type": "acquired",
        "source": "C1",
        "target": "C2",
        "attributes": {{
          "valueAmount": 500000000,
          "transactionDate": "2025-02"
        }}
      }}
    ]
  }}
  ```

  ## Additional Guidance

  - If no attributes are mentioned for an entity or relationship, include an empty attributes object
  - If you're uncertain about an entity or relationship, do not include it
  - For symmetric relationships like `mergedWith`, the source and target can be assigned arbitrarily
  - If no entities or relationships are found, return empty arrays for those sections
  - Ensure all IDs are consistent throughout the output
  - Do not extract relationships between entities that aren't companies
  - Prioritize precision over recall
  - Numeric values should be standardized (remove currency symbols, commas, etc.)
  - Dates should be normalized to YYYY-MM-DD format when possible, or partial dates like YYYY-MM if the day isn't specified

  ## IMPORTANT OUTPUT INSTRUCTION
  YOUR RESPONSE MUST ONLY CONTAIN THE JSON OBJECT DESCRIBED IN THE OUTPUT FORMAT SECTION.
  DO NOT INCLUDE ANY EXPLANATORY TEXT, INTRODUCTION, OR CONCLUSION.
  ONLY OUTPUT THE JSON OBJECT ITSELF.

  Now, please analyze the following financial text:

  ```
  {text}
  ```

v4: |
  You are a financial knowledge graph specialist tasked with extracting structured information from financial news articles. Your goal is to identify companies and their relationships, organize them into a knowledge graph structure, and return a clean JSON representation.

  # Financial Knowledge Graph Ontology

  ## Entity Types:
  - Company: Any business organization mentioned in the text

  ## Entity Attributes:
  - companyName: Full legal name of the company
  - ticker: Stock market ticker symbol (if mentioned)
  - industry: Business sector or industry
  - country: Country of headquarters or incorporation

  ## Relationship Types:
  - hasDebtHolder: Company A has Company B as a debt holder
  - hasEquityStakeIn: Company A has an equity stake in Company B
  - mergedWith: Company A merged with Company B (symmetric relationship)
  - acquired: Company A acquired Company B

  ## Relationship Attributes:
  - valueAmount: Monetary value of transaction (numeric)
  - percentage: Ownership percentage (numeric)
  - transactionDate: When the transaction occurred (date)

  # Structured Decomposition Process

  To ensure accurate extraction, please follow this step-by-step process:

  ## STEP 1: Entity Identification
  - List all companies mentioned in the text
  - Assign each a unique ID (C1, C2, etc.)
  - Record their full names exactly as they appear

  ## STEP 2: Entity Attribute Extraction
  - For each identified company, extract:
    * Stock ticker (if mentioned)
    * Industry/sector (if mentioned)
    * Country of operation (if mentioned)

  ## STEP 3: Relationship Detection
  - Examine the text for explicit statements about:
    * Debt relationships
    * Equity ownership
    * Mergers
    * Acquisitions
  - For each relationship, identify the source company and target company

  ## STEP 4: Relationship Attribute Extraction
  - For each relationship, extract associated details:
    * Monetary values (convert to plain numbers)
    * Percentage stakes (as numeric values)
    * Transaction dates (standardized format)

  ## STEP 5: Self-Verification
  - Check that all extracted companies actually exist in the text
  - Verify that relationships are explicitly stated, not implied
  - Ensure relationship types match the predefined ontology
  - Confirm all IDs are used consistently throughout

  # Output Format

  Your output must be a single JSON object with the following structure:

  ```json
  {{
    "entities": [
      {{
        "id": "C1",
        "type": "Company",
        "name": "CompanyName",
        "attributes": {{
          "companyName": "Full Name",
          "ticker": "TCK",
          "industry": "Industry",
          "country": "Country"
        }}
      }},
      ...
    ],
    "relationships": [
      {{
        "id": "R1",
        "type": "relationshipType",
        "source": "C1",
        "target": "C2",
        "attributes": {{
          "valueAmount": 1000000,
          "percentage": 25.5,
          "transactionDate": "2023-04-15"
        }}
      }},
      ...
    ]
  }}
  ```

  # Example

  For the text: "GlobalTech Inc. (NYSE: GTI), a US technology firm, acquired SmartSolutions Ltd. for $500 million in February 2025."

  Expected output:
  ```json
  {{
    "entities": [
      {{
        "id": "C1",
        "type": "Company",
        "name": "GlobalTech Inc.",
        "attributes": {{
          "companyName": "GlobalTech Inc.",
          "ticker": "GTI",
          "industry": "technology",
          "country": "US"
        }}
      }},
      {{
        "id": "C2",
        "type": "Company",
        "name": "SmartSolutions Ltd.",
        "attributes": {{
          "companyName": "SmartSolutions Ltd."
        }}
      }}
    ],
    "relationships": [
      {{
        "id": "R1",
        "type": "acquired",
        "source": "C1",
        "target": "C2",
        "attributes": {{
          "valueAmount": 500000000,
          "transactionDate": "2025-02"
        }}
      }}
    ]
  }}
  ```

  # Important Rules

  - If attributes are not mentioned in the text, include an empty object for them
  - If no relationships are found, return an empty array for relationships
  - Use only explicitly stated information from the text
  - Do not include entities or relationships that aren't clearly mentioned
  - Standardize numeric values by removing currency symbols and formatting
  - Format dates consistently in YYYY-MM-DD format when possible

  # CRITICAL OUTPUT INSTRUCTION
  YOUR RESPONSE MUST CONTAIN ONLY THE JSON OBJECT. DO NOT INCLUDE ANY EXPLANATORY TEXT, REASONING, OR ADDITIONAL COMMENTS.

  Now, please analyze this financial text and extract the knowledge graph:

  {text}


v5:
  | # like v4 but using XML style tags; Also, no role assigned to the LLM at the beginning
  <context>
  The text delimited by triple backticks below contains financial information that needs to be parsed into entities (primarily companies) with their attributes, and the relationships between these entities with their attributes.
  </context>

  <ontology>
  <entity_types>
  - **Company**: Business organizations mentioned in the text
  </entity_types>

  <entity_attributes>
  - **companyName**: Full name of the company (string)
  - **ticker**: Stock market ticker symbol (string)
  - **industry**: Company's business sector (string)
  - **country**: Country where the company is headquartered (string)
  </entity_attributes>

  <relationship_types>
  - **hasDebtHolder**: Company A has Company B as a debt holder
  - **hasEquityStakeIn**: Company A has an equity stake in Company B
  - **mergedWith**: Company A merged with Company B (symmetric relationship)
  - **acquired**: Company A acquired Company B
  </relationship_types>

  <relationship_attributes>
  - **valueAmount**: Monetary value of the transaction (float)
  - **percentage**: Percentage stake in equity relationships (float)
  - **transactionDate**: Date when the transaction occurred (date)
  </relationship_attributes>
  </ontology>

  <instructions>
  Perform the following actions in sequence:

  1. **Detect Companies**: Identify all companies mentioned in the text and assign each a unique index (C1, C2, etc.)
  2. **Extract Company Attributes**: For each company, extract any mentioned attributes
  3. **Detect Relationships**: Identify all relationships between pairs of companies
  4. **Extract Relationship Attributes**: For each relationship, extract any relevant attributes
  </instructions>

  <output_format>
  Provide your output as a JSON object with two main sections:

  ```json
  {{
    "entities": [
      {{
        "id": "C1",
        "type": "Company",
        "name": "CompanyNameHere",
        "attributes": {{
          "companyName": "Full Company Name",
          "ticker": "TCK",
          "industry": "Industry if mentioned",
          "country": "Country if mentioned"
        }}
      }},
      // More entities as needed
    ],
    "relationships": [
      {{
        "id": "R1",
        "type": "relationshipType",
        "source": "C1",
        "target": "C2",
        "attributes": {{
          "valueAmount": 1000000,
          "percentage": 25.5,
          "transactionDate": "2023-04-15"
        }}
      }},
      // More relationships as needed
    ]
  }}
  ```
  </output_format>

  <example>
  For the text: "GlobalTech Inc. (NYSE: GTI), a US technology firm, acquired SmartSolutions Ltd. for $500 million in February 2025. After the acquisition, SmartSolutions will continue to operate as a subsidiary."

  Expected output:
  ```json
  {{
    "entities": [
      {{
        "id": "C1",
        "type": "Company",
        "name": "GlobalTech Inc.",
        "attributes": {{
          "companyName": "GlobalTech Inc.",
          "ticker": "GTI",
          "industry": "technology",
          "country": "US"
        }}
      }},
      {{
        "id": "C2",
        "type": "Company",
        "name": "SmartSolutions Ltd.",
        "attributes": {{
          "companyName": "SmartSolutions Ltd."
        }}
      }}
    ],
    "relationships": [
      {{
        "id": "R1",
        "type": "acquired",
        "source": "C1",
        "target": "C2",
        "attributes": {{
          "valueAmount": 500000000,
          "transactionDate": "2025-02"
        }}
      }}
    ]
  }}
  ```
  </example>

  <guidelines>
  - If no attributes are mentioned for an entity or relationship, include an empty attributes object
  - If you're uncertain about an entity or relationship, do not include it
  - For symmetric relationships like `mergedWith`, the source and target can be assigned arbitrarily
  - If no entities or relationships are found, return empty arrays for those sections
  - Ensure all IDs are consistent throughout the output
  - Do not extract relationships between entities that aren't companies
  - Prioritize precision over recall
  - Numeric values should be standardized (remove currency symbols, commas, etc.)
  - Dates should be normalized to YYYY-MM-DD format when possible, or partial dates like YYYY-MM if the day isn't specified
  </guidelines>

  <important_note>
  YOUR RESPONSE MUST ONLY CONTAIN THE JSON OBJECT DESCRIBED IN THE OUTPUT FORMAT SECTION.
  DO NOT INCLUDE ANY EXPLANATORY TEXT, INTRODUCTION, OR CONCLUSION.
  ONLY OUTPUT THE JSON OBJECT ITSELF.
  </important_note>

  <input>
  {text}
  </input>

generate_synthetic_data: |
  Please generate 10 sets of financial knowledge graph relationships and their corresponding news articles. For each set:

  1. First, generate 1-3 relationships between companies following this structure:
    {
      "entities": [
        {
          "id": "C1",
          "type": "Company",
          "name": "CompanyName",
          "attributes": {
            "companyName": "Full Company Name",
            "ticker": "TICK",
            "industry": "Industry",
            "country": "Country"
          }
        },
        // Other companies involved
      ],
      "relationships": [
        {
          "id": "R1",
          "type": "relationshipType",
          "source": "C1",
          "target": "C2",
          "attributes": {
            "valueAmount": 1000000,
            "percentage": 25.5,
            "transactionDate": "2023-04-15"
          }
        }
      ]
    }

  Relationship types to use:
  - hasDebtHolder: Company A has Company B as a debt holder
  - hasEquityStakeIn: Company A has an equity stake in Company B
  - mergedWith: Company A merged with Company B (symmetric)
  - acquired: Company A acquired Company B

  2. Then, write a realistic financial news article (300-500 words) that:
    - Naturally incorporates all the relationships from step 1
    - Provides context for the companies involved
    - Includes relevant financial details from the relationships
    - Uses proper financial terminology
    - Maintains a professional news article tone
    - Includes market implications and industry context

  Please format your response as follows:

  Set 1:
  Relationships:
  [JSON object with entities and relationships]

  Article:
  [Title]
  [Full article text that incorporates the above relationships]

  Set 2:
  Relationships:
  [JSON object with entities and relationships]

  Article:
  [Title]
  [Full article text that incorporates the above relationships]

  And so on for all 10 sets.

  Guidelines:
  - Each set should have 1-3 clear relationships between companies
  - Include specific values, percentages, and dates in the relationships
  - Ensure company names are realistic and consistent
  - Make the article flow naturally while including all relationship information
  - Include ticker symbols and industry information when possible
  - The article should read like a real financial news piece, not just a list of facts
